// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "noisy.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic noisy::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic noisy::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> noisy::ap_ST_fsm_state1 = "1";
const sc_lv<17> noisy::ap_ST_fsm_state2 = "10";
const sc_lv<17> noisy::ap_ST_fsm_state3 = "100";
const sc_lv<17> noisy::ap_ST_fsm_state4 = "1000";
const sc_lv<17> noisy::ap_ST_fsm_state5 = "10000";
const sc_lv<17> noisy::ap_ST_fsm_state6 = "100000";
const sc_lv<17> noisy::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> noisy::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> noisy::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> noisy::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> noisy::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> noisy::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> noisy::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> noisy::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> noisy::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> noisy::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> noisy::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<1> noisy::ap_const_lv1_0 = "0";
const sc_lv<1> noisy::ap_const_lv1_1 = "1";
const sc_lv<2> noisy::ap_const_lv2_0 = "00";
const sc_lv<2> noisy::ap_const_lv2_2 = "10";
const sc_lv<2> noisy::ap_const_lv2_3 = "11";
const sc_lv<2> noisy::ap_const_lv2_1 = "1";
const sc_lv<32> noisy::ap_const_lv32_1 = "1";
const sc_lv<32> noisy::ap_const_lv32_F = "1111";
const sc_lv<32> noisy::ap_const_lv32_10 = "10000";
const sc_lv<32> noisy::ap_const_lv32_6 = "110";
const sc_lv<32> noisy::ap_const_lv32_B = "1011";
const sc_lv<5> noisy::ap_const_lv5_0 = "00000";
const sc_lv<32> noisy::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> noisy::ap_const_lv32_C7000000 = "11000111000000000000000000000000";
const sc_lv<32> noisy::ap_const_lv32_7 = "111";
const sc_lv<32> noisy::ap_const_lv32_38000000 = "111000000000000000000000000000";
const sc_lv<32> noisy::ap_const_lv32_C = "1100";
const sc_lv<5> noisy::ap_const_lv5_10 = "10000";
const sc_lv<5> noisy::ap_const_lv5_1 = "1";
const sc_lv<32> noisy::ap_const_lv32_1100B = "10001000000001011";
const sc_lv<32> noisy::ap_const_lv32_D = "1101";
const sc_lv<32> noisy::ap_const_lv32_E = "1110";
const bool noisy::ap_const_boolean_1 = true;

noisy::noisy(sc_module_name name) : sc_module(name), mVcdFile(0) {
    noisy_fadd_32ns_3bkb_U1 = new noisy_fadd_32ns_3bkb<1,5,32,32,32>("noisy_fadd_32ns_3bkb_U1");
    noisy_fadd_32ns_3bkb_U1->clk(ap_clk);
    noisy_fadd_32ns_3bkb_U1->reset(ap_rst_n_inv);
    noisy_fadd_32ns_3bkb_U1->din0(tmp_reg_142);
    noisy_fadd_32ns_3bkb_U1->din1(ap_var_for_const0);
    noisy_fadd_32ns_3bkb_U1->ce(ap_var_for_const1);
    noisy_fadd_32ns_3bkb_U1->dout(grp_fu_64_p2);
    noisy_fmul_32ns_3cud_U2 = new noisy_fmul_32ns_3cud<1,4,32,32,32>("noisy_fmul_32ns_3cud_U2");
    noisy_fmul_32ns_3cud_U2->clk(ap_clk);
    noisy_fmul_32ns_3cud_U2->reset(ap_rst_n_inv);
    noisy_fmul_32ns_3cud_U2->din0(tmp_1_reg_147);
    noisy_fmul_32ns_3cud_U2->din1(ap_var_for_const2);
    noisy_fmul_32ns_3cud_U2->ce(grp_fu_69_ce);
    noisy_fmul_32ns_3cud_U2->dout(grp_fu_69_p2);
    noisy_uitofp_32nsdEe_U3 = new noisy_uitofp_32nsdEe<1,6,32,32>("noisy_uitofp_32nsdEe_U3");
    noisy_uitofp_32nsdEe_U3->clk(ap_clk);
    noisy_uitofp_32nsdEe_U3->reset(ap_rst_n_inv);
    noisy_uitofp_32nsdEe_U3->din0(state);
    noisy_uitofp_32nsdEe_U3->ce(ap_var_for_const1);
    noisy_uitofp_32nsdEe_U3->dout(grp_fu_75_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_83_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_53 );

    SC_METHOD(thread_grp_fu_69_ce);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_i_1_fu_89_p2);
    sensitive << ( i_reg_53 );

    SC_METHOD(thread_out_V_1_ack_in);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_ack_out);
    sensitive << ( out_V_TREADY );

    SC_METHOD(thread_out_V_1_data_out);
    sensitive << ( out_V_1_payload_A );
    sensitive << ( out_V_1_payload_B );
    sensitive << ( out_V_1_sel );

    SC_METHOD(thread_out_V_1_load_A);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_load_B);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_sel);
    sensitive << ( out_V_1_sel_rd );

    SC_METHOD(thread_out_V_1_state_cmp_full);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_vld_in);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_out_V_1_vld_out);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_TDATA);
    sensitive << ( out_V_1_data_out );

    SC_METHOD(thread_out_V_TDATA_blk_n);
    sensitive << ( out_V_1_state );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_storemerge_fu_115_p3);
    sensitive << ( tmp_3_fu_95_p2 );
    sensitive << ( tmp_4_fu_101_p3 );
    sensitive << ( tmp_7_fu_109_p2 );

    SC_METHOD(thread_tmp_3_fu_95_p2);
    sensitive << ( state );

    SC_METHOD(thread_tmp_4_fu_101_p3);
    sensitive << ( state );

    SC_METHOD(thread_tmp_7_fu_109_p2);
    sensitive << ( tmp_3_fu_95_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_83_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    out_V_1_sel_rd = SC_LOGIC_0;
    out_V_1_sel_wr = SC_LOGIC_0;
    out_V_1_state = "00";
    state = "00000000000000000000000000000001";
    ap_CS_fsm = "00000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "noisy_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, out_V_1_data_out, "out_V_1_data_out");
    sc_trace(mVcdFile, out_V_1_vld_in, "out_V_1_vld_in");
    sc_trace(mVcdFile, out_V_1_vld_out, "out_V_1_vld_out");
    sc_trace(mVcdFile, out_V_1_ack_in, "out_V_1_ack_in");
    sc_trace(mVcdFile, out_V_1_ack_out, "out_V_1_ack_out");
    sc_trace(mVcdFile, out_V_1_payload_A, "out_V_1_payload_A");
    sc_trace(mVcdFile, out_V_1_payload_B, "out_V_1_payload_B");
    sc_trace(mVcdFile, out_V_1_sel_rd, "out_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_1_sel_wr, "out_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_1_sel, "out_V_1_sel");
    sc_trace(mVcdFile, out_V_1_load_A, "out_V_1_load_A");
    sc_trace(mVcdFile, out_V_1_load_B, "out_V_1_load_B");
    sc_trace(mVcdFile, out_V_1_state, "out_V_1_state");
    sc_trace(mVcdFile, out_V_1_state_cmp_full, "out_V_1_state_cmp_full");
    sc_trace(mVcdFile, state, "state");
    sc_trace(mVcdFile, out_V_TDATA_blk_n, "out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, i_1_fu_89_p2, "i_1_fu_89_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_83_p2, "exitcond_fu_83_p2");
    sc_trace(mVcdFile, grp_fu_75_p1, "grp_fu_75_p1");
    sc_trace(mVcdFile, tmp_reg_142, "tmp_reg_142");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_64_p2, "grp_fu_64_p2");
    sc_trace(mVcdFile, tmp_1_reg_147, "tmp_1_reg_147");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_69_p2, "grp_fu_69_p2");
    sc_trace(mVcdFile, i_reg_53, "i_reg_53");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, storemerge_fu_115_p3, "storemerge_fu_115_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_3_fu_95_p2, "tmp_3_fu_95_p2");
    sc_trace(mVcdFile, tmp_4_fu_101_p3, "tmp_4_fu_101_p3");
    sc_trace(mVcdFile, tmp_7_fu_109_p2, "tmp_7_fu_109_p2");
    sc_trace(mVcdFile, grp_fu_69_ce, "grp_fu_69_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("noisy.hdltvin.dat");
    mHdltvoutHandle.open("noisy.hdltvout.dat");
}

noisy::~noisy() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete noisy_fadd_32ns_3bkb_U1;
    delete noisy_fmul_32ns_3cud_U2;
    delete noisy_uitofp_32nsdEe_U3;
}

void noisy::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void noisy::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_C7000000;
}

void noisy::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_38000000;
}

void noisy::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_83_p2.read()))) {
        i_reg_53 = i_1_fu_89_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_reg_53 = ap_const_lv5_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_out.read()))) {
            out_V_1_sel_rd =  (sc_logic) (~out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_in.read()))) {
            out_V_1_sel_wr =  (sc_logic) (~out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_2)))) {
            out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_1)))) {
            out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()))))) {
            out_V_1_state = ap_const_lv2_3;
        } else {
            out_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_A.read())) {
        out_V_1_payload_A = grp_fu_69_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_B.read())) {
        out_V_1_payload_B = grp_fu_69_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_83_p2.read()))) {
        state = storemerge_fu_115_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_1_reg_147 = grp_fu_64_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_reg_142 = grp_fu_75_p1.read();
    }
}

void noisy::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void noisy::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void noisy::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void noisy::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void noisy::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void noisy::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void noisy::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void noisy::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void noisy::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void noisy::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void noisy::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void noisy::thread_exitcond_fu_83_p2() {
    exitcond_fu_83_p2 = (!i_reg_53.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_53.read() == ap_const_lv5_10);
}

void noisy::thread_grp_fu_69_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        grp_fu_69_ce = ap_const_logic_1;
    } else {
        grp_fu_69_ce = ap_const_logic_0;
    }
}

void noisy::thread_i_1_fu_89_p2() {
    i_1_fu_89_p2 = (!i_reg_53.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_53.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void noisy::thread_out_V_1_ack_in() {
    out_V_1_ack_in = out_V_1_state.read()[1];
}

void noisy::thread_out_V_1_ack_out() {
    out_V_1_ack_out = out_V_TREADY.read();
}

void noisy::thread_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_sel.read())) {
        out_V_1_data_out = out_V_1_payload_B.read();
    } else {
        out_V_1_data_out = out_V_1_payload_A.read();
    }
}

void noisy::thread_out_V_1_load_A() {
    out_V_1_load_A = (out_V_1_state_cmp_full.read() & ~out_V_1_sel_wr.read());
}

void noisy::thread_out_V_1_load_B() {
    out_V_1_load_B = (out_V_1_sel_wr.read() & out_V_1_state_cmp_full.read());
}

void noisy::thread_out_V_1_sel() {
    out_V_1_sel = out_V_1_sel_rd.read();
}

void noisy::thread_out_V_1_state_cmp_full() {
    out_V_1_state_cmp_full =  (sc_logic) ((!out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_1_state.read() != ap_const_lv2_1))[0];
}

void noisy::thread_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
        out_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_1_vld_in = ap_const_logic_0;
    }
}

void noisy::thread_out_V_1_vld_out() {
    out_V_1_vld_out = out_V_1_state.read()[0];
}

void noisy::thread_out_V_TDATA() {
    out_V_TDATA = out_V_1_data_out.read();
}

void noisy::thread_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        out_V_TDATA_blk_n = out_V_1_state.read()[1];
    } else {
        out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void noisy::thread_out_V_TVALID() {
    out_V_TVALID = out_V_1_state.read()[0];
}

void noisy::thread_storemerge_fu_115_p3() {
    storemerge_fu_115_p3 = (!tmp_4_fu_101_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_101_p3.read()[0].to_bool())? tmp_7_fu_109_p2.read(): tmp_3_fu_95_p2.read());
}

void noisy::thread_tmp_3_fu_95_p2() {
    tmp_3_fu_95_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): state.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void noisy::thread_tmp_4_fu_101_p3() {
    tmp_4_fu_101_p3 = state.read().range(15, 15);
}

void noisy::thread_tmp_7_fu_109_p2() {
    tmp_7_fu_109_p2 = (tmp_3_fu_95_p2.read() ^ ap_const_lv32_1100B);
}

void noisy::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_83_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXX";
            break;
    }
}

void noisy::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_V_TDATA\" :  \"" << out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TVALID\" :  \"" << out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_TREADY\" :  \"" << out_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

